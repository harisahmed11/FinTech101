@using GraphDataApi;
@using FinTech101.Models;

@{
    var years = ViewBag.years;
    string charttitle = Convert.ToString(ViewBag.title);
    //int? yearvalue = ViewBag.yrvalue;
}

<style>
    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .bar {
        fill: red;
    }

    .bar:hover {
            fill: royalblue;
            cursor: pointer;
    }

    .x.axis path {
        display: none;
    }

    .graphtitletext {
        text-anchor: middle;
        font-size: 16px;
        font-weight: bold;
    }

    .bartext {
        text-anchor: middle;
        font-weight: bold;
    }

    .line {
        fill: none;
        stroke: #444;
        stroke-width: 1.5px;
        stroke-opacity: 0.5;
    }
</style>



<div id="bargraph"></div>

<script src="~/Content/d3.js/d3.min.js"></script>

<script>
    var data= @Html.Raw(years);

    var barConfig ={
        barGraphContainerDiv : "result",
        height: 500,
        width: 800,
        padding: 80,
        dataset:data,  //Data Contain Key and Value Format, For Example Value = 2013 & Key = 15, Value = 2014 & Key = 25
        dataApiUrl: 'http://localhost:61531/api/GraphApi', //Demo Api Url just for creating logic
        barGraphTitleText:"@charttitle",
        barCssClass: "bar",
        barTitleClass:"graphtitletext",
        barTextCssClass: "bartext",
        showCategoryLabelVertically: false,
        showGraphHorizontally: false,
        showAverageLine: true,
        averageLineDataProvider:function(){  return 20 }, //will run only when showAverageLine property is true.
        showScale:true, //hide X-axis Scale or if Vertical then Y-Axis Scale
        onBarClick:function(d) { alert("Bar clicked, Value is "+d.Key); }
    }

    $(document).ready(function () {
        window.load = drawBarChart(barConfig);
    });


    function drawBarChart(config){

        var dataset;

        //this condition check the source of data for a BarGraph 
        // if dataset property in barconfig is provided then Simply load from them.
        if(config.dataset)
        {
            //Load dataset variable form config dataset property
            dataset=config.dataset;          
        }
        // else dataset property in barconfig is Not provided then load data from Apiurl  
        else{          
                var uri=config.dataApiUrl;
                $.get(uri)
                     .done(function (data) {
                         // On success, 'data' contains a list of Key and Value Items for BarGraph.
                         dataset= data;
                     });
           
        }
     
        //here checkVariable function is created just because of Api Dataloading issue (data loading from Api takes some time) so, this function load Graph after 5 sec.
        function checkVariable() {   
          
        var w = config.width;
        var h = config.height;
        var padding = config.padding;
        var title = config.barGraphTitleText;
        var xScale,yScale,xAxis,yAxis,barwidth;

        //Create SVG element
        var svg = d3.select("#"+config.barGraphContainerDiv+"")
                    .append("svg")
                    .attr("width", w + padding)
                    .attr("height", h + padding);

        //Common Attributes for Displaying  text(bar value Above each bar) in both Horizontal & Vertical BarGraph
        var bartext= svg.selectAll("text.bar")
                    .data(dataset)
                    .enter().append("text")
                    .attr("class",config.bartextcssclass);

        //Common attributes for Drawing Bar in both Horizontal & Vertical BarGraph
        var drawbar  = svg.selectAll("rect")
                         .data(dataset)
                         .enter()
                         .append("rect")
                         .attr("class", config.barCssClass)
                         .on('click', function(d){ config.onBarClick(d) });

        //Common attributes for Drawing x-Scale in both Horizontal & Vertical BarGraph.
        var drawxAxis = svg.append("g")
                          .attr("class", "axis")
                          .on("click", function (d) { alert('clicked!'); })

        //Common attributes for Drawing y-Scale in both Horizontal & Vertical BarGraph.
        var drawyAxis = svg.append("g")
                         .attr("class", "axis")
                         .on("click", function (d) { alert('clicked!'); });

        //Common attributes for Drawing Average Line in Both Horizontal & Vertical BarGraph
        if(config.showAverageLine)
        {
            //dataSum = d3.sum( dataset, function (d) { return d.Key; });
            var ScaleForAverageLine;

            var line = d3.svg.line()

            ScaleForAverageLine = d3.scale.ordinal()
                                              .domain( dataset.map(function (d) { return d.Value; }));

            //will create average line in graph
            var pathappend = svg.append("path")
                                .datum( dataset)
                                .attr("class", "line")
                                .style("stroke-dasharray", ("3, 3"));
        }

        //BarGraph Title
        svg.append("text")
               .attr("x", (w + padding)/ 2)
               .attr("y",padding/2)
               .attr("class",config.barTitleClass)
               .text(""+title+"");


        //if showGraphHorizontally property is true then display Graph Horizontally
        if(config.showGraphHorizontally)
        {
            xScale = d3.scale.linear()
                                 .domain([0, d3.max( dataset, function(d) { return d.Key; } ) ])
                                 .range([padding, w - padding]);

            yScale = d3.scale.ordinal()
                                 .rangeRoundBands([0, h], .1)
                                 .domain( dataset.map(function (d) { return d.Value; }) );

            xAxis  = d3.svg.axis()
                              .scale(xScale)
                              .orient("bottom")

            yAxis  = d3.svg.axis()
                              .scale(yScale)
                              .orient("left")

            barwidth = yScale.rangeBand() / 2;

            //Specific attributes for Displaying text(bar value above each bar) in Horizontal Bargraph.
            bartext.attr("x", function (d) { return xScale(d.Key)+(barwidth/2); })
                   .attr("y", function (d) { return yScale(d.Value) + (padding - 20) + barwidth ; })
                   .text(function (d) { return d.Key; });

            //Specific attributes for Drawing Bar Horizontally
            drawbar.attr("x", 0 + padding )
                   .attr("width",function (d) { return  xScale(d.Key) - padding; })
                   .attr("y", function (d) { return yScale(d.Value) + (padding - 20) })
                   .attr("height",  yScale.rangeBand())


            //Specific attributes for Drawing x-Scale in Horizontal Formate
            //will run only when showScale property is true.
            if (config.showScale)
            {
                //Append properties in drawxAxis variable
                drawxAxis.call(xAxis)
                         .attr("transform", "translate(" + 0 + "," + (h + (padding - 20)) + ")");
            }

            //Specific attributes for Drawing y-Scale in Horizontal Formate
            drawyAxis .call(yAxis)
                      .attr("transform", "translate(" + padding + "," + (padding - 20) + ")");


            //Specific attributes for Drawing AverageLine Horizontally
            //will run only when showAverageLine property is true.
            if(config.showAverageLine)
            {
                //Define x and y coordiantes of a common variable 'line'.
                line.x(function (d) { return xScale( config.averageLineDataProvider() ); })    //averageLineDataProvider is a function for calculating Average point.....
                    .y(function (d, i) { return ScaleForAverageLine(d.Value) + i + (padding - 20); });

                //Add RangBands for Horizontal Graph
                ScaleForAverageLine.rangeBands([0, h+(padding)+(barwidth*3)], 0);

                //Will Display Avg line
                pathappend.attr("d", line);

            }

        }


            //if showGraphHorizontally property is false then display Graph Vertically
        else{

            xScale = d3.scale.ordinal()
                         .domain(dataset.map(function (d) { return d.Value; }))
                         .rangeRoundBands([0, w] , .1)


            yScale = d3.scale.linear()
                        .domain([0 , d3.max(dataset, function (d) { return d.Key; })])
                        .range([h - padding, 0]);

            xAxis  = d3.svg.axis()
                              .scale(xScale)
                              .orient("bottom");

            yAxis  = d3.svg.axis()
                              .scale(yScale)
                              .orient("left")

            barwidth = xScale.rangeBand() / 2;

            //Specific attributes for Displaying text(bar value above each bar) in Vertical Bargraph.
            bartext.attr("x", function (d) { return xScale(d.Value) + padding + barwidth ; })
            bartext.attr("y", function (d) { return yScale(d.Key) +(padding -10)  ; })
            bartext.text(function (d) { return d.Key; });

            //Specific attributes for Drawing Bar Vertically
            drawbar.attr("x", function (d) { return xScale(d.Value) + padding ; })
            drawbar.attr("width", xScale.rangeBand() )
            drawbar.attr("y", function (d) { return yScale(d.Key) + padding ; })
            drawbar.attr("height", function (d) { return h - yScale(d.Key) - padding; })


            //Specific attributes for Drawing x-Scale in Horizontal Formate
            if(config.showCategoryLabelVertically)
            {
                //Append properties in drawxAxis variable
                drawxAxis.call(xAxis)
                         .attr("transform", "translate(" + padding + "," + h + ")")
                         .selectAll("text")
                         .attr("y", 0)
                         .attr("x", 9)
                         .attr("dy", ".35em")
                         .attr("transform", "rotate(90)")
                         .style("text-anchor", "start");
            }

             // if showCategoryLabelVertically is false then else will execute
            else{
                //Append properties in drawxAxis variable
                drawxAxis.call(xAxis)
                         .attr("transform", "translate(" + padding + "," + h + ")");

            }

            //Specific attributes for Drawing y-Scale in Horizontal Formate
            // Will Check showScale is true or false if true then show y-Scale
            if(config.showScale){

                //Append properties in drawyAxis variable
                drawyAxis.call(yAxis)
                         .attr("transform", "translate(" + padding + "," + padding + ")");

            }

            //Specific attributes for Drawing AverageLine Vertically
            //will run only when showAverageLine property is true.
            if(config.showAverageLine)
            {
                //Define x and y coordiantes of a variable line.
                line.x(function (d, i) { return ScaleForAverageLine(d.Value) + i + (padding); })
                    .y(function (d) { return yScale( config.averageLineDataProvider() ) + padding; });

                ScaleForAverageLine.rangeBands([0, w+(padding)+(barwidth*3)], 0);

                pathappend.attr("d", line);

            }
            }
        
        
        }
        //Load Graph after 5 sec.
        setTimeout(checkVariable,5000);
    }
</script>
