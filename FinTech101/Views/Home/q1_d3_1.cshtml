@using FinTech101.Models
@{
    var years = ViewBag.years;
    string charttitle = Convert.ToString(ViewBag.title);
    string howerdescription = Convert.ToString(ViewBag.Descirption);
    int? yearvalue = ViewBag.yrvalue;
}
<style>
    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

        .circle:hover {
            fill: royalblue;
            cursor: pointer;
        }

    .x.axis path {
        display: none;
    }

</style>

<div id="bargraph"></div>

<script src="~/Content/d3.js/d3.min.js"></script>
<script src="~/Content/d3.js/d3.tip.v0.6.3.js"></script>

<script>
    //d3.select("svg").remove();
    @*//var dataset = @Html.Raw(years);*@
    var dataset = [{ "Key": 1, "Value": 20 },
                   { "Key": 1, "Value": 27 },
                   { "Key": 2, "Value": 27 },
                   { "Key": 3, "Value": 27 },
                   { "Key": 1, "Value": 60 },
                   { "Key": 2, "Value": 60 },
                   { "Key": 3, "Value": 40 },
                   { "Key": 2, "Value": 40 },
                   { "Key": 1, "Value": 40 }];
    var w = 800;
    var h = 500;
    var padding = 60;
    var title = "@charttitle";
    var description = "@howerdescription";
    var yrvalue="@yearvalue";

    var xScale = d3.scale.ordinal()
                .domain(dataset.map(function (d) { return d.Value; }))
                 .rangeRoundBands([0, w], .1)

    var yScale = d3.scale.linear()
                .domain([0, 10])
                .range([h - padding , 0]);

    var xAxis = d3.svg.axis()
                      .scale(xScale)
                      .orient("bottom");


    //Define Y axis
    var yAxis = d3.svg.axis()
                      .scale(yScale)
                      .orient("left")

    //Create SVG element
    var svg = d3.select("#bargraph")
                .append("svg")
                .attr("width", w + padding)
                .attr("height", h + padding)


    //Create X axis
    svg.append("g")
        .attr("class", "axis")
        .attr("transform", "translate(" + padding + "," + h + ")")
        .call(xAxis)
        .on("click", function (d) { alert('clicked!'); });

    ////Create Y axis
    //svg.append("g")
    //    .attr("class", "axis")
    //    .attr("transform", "translate(" + padding + "," + padding + ")")
    //    .call(yAxis);


    var barwidth = xScale.rangeBand() / 2;
   

    svg.selectAll("circle")
               .data(dataset)
               .enter().append("circle")
               .attr("class", "circle")
               .attr("cy", function (d, i) { return yScale(d.Key) + padding })
               .attr("cx", function (d) { return xScale(d.Value) + (xScale.rangeBand() / 2) + padding })
                   .attr("r", 10)
               .attr("fill", "Red")
               .on('click', function (d) {
                   alert('circle clicked');
               });

   
    //for (var i in dataset) {       
    //    var key = dataset[i].Key;     
    //    for (var j =1; j <= key;j++)
    //    {
    //        //console.log("keyy in dataset iteration "+i+" is :"+j)
    //        var yplot = j;
            
    //        console.log("y plot is " + yplot);
                  
    //    }
    //}
   
</script>

